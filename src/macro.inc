;******************************************************************************
; Free386 macro
;******************************************************************************
;
%define	b	byte
%define	w	word
%define	d	dword
%define	offset

%macro	proc	1
	global	%1
	align	4
%1:
%endmacro

%imacro	PRINT86	1
	mov	dx,%1
	mov	ah,09h
	int	21h
%endmacro

%imacro	PRINT	1
	mov	edx,%1
	mov	ah,09h
	int	21h
%endmacro

%imacro	PRINT_	1
	push	eax
	push	edx
	mov	edx,%1
	mov	ah,09h
	int	21h
	pop	edx
	pop	eax
%endmacro

%imacro	PRINT_crlf	0
	mov	ah,02h
	mov	dl,13
	int	21h
	mov	dl,10
	int	21h
%endmacro

;******************************************************************************
;Free386 dependent macro
;******************************************************************************
;------------------------------------------------------------------------------
;・XMS Driver を call するマクロ
;------------------------------------------------------------------------------
%macro	XMS_function	0
	call	far [XMS_entry]		;XMS far call
%endmacro

;------------------------------------------------------------------------------
;・V86 の int を発効するマクロ
;------------------------------------------------------------------------------
%macro	V86_INT	1
	pushf
	push	cs
	push	d (offset .ret_label)
	push	d %1			;int number
	jmp	call_V86_int

	align	4
.ret_label:
%endmacro

%macro	V86_INT_21h	0
	pushf
	push	cs
	call	call_V86_int21
%endmacro

;------------------------------------------------------------------------------
;・キャリークリア & キャリーセット
;------------------------------------------------------------------------------
%imacro	set_cy	0	;Carry set
	or	b [esp+8], 01h	;Carry セット
%endmacro

%imacro	clear_cy 0	;Carry reset
	and	b [esp+8],0feh	;Carry クリア
%endmacro

save_cy:	;
cy_save:	;誤植防止措置
cy_set:		;
cy_clear:	;

;------------------------------------------------------------------------------
;・キャリーの状態をセーブして iret するマクロ
;------------------------------------------------------------------------------
%imacro	iret_save_cy	0	;Cy をセーブし iretd する
	jc	.__set_cy
	clear_cy
	iret
.__set_cy:
	set_cy
	iret
%endmacro

;------------------------------------------------------------------------------
;・INT 呼び出しのようにラベルを call するマクロ
;------------------------------------------------------------------------------
%imacro	calli	1	;Cy をセーブし iretd する
	pushf
	push	cs
	call	%1
%endmacro

;------------------------------------------------------------------------------
;・レジスタダンプ
;------------------------------------------------------------------------------
%imacro call_RegisterDump_with_code	1
	mov	d [dump_err_code], %1
	call	register_dump		;safe
%endmacro

;------------------------------------------------------------------------------
;・INT用レジスタダンプ
;------------------------------------------------------------------------------
%imacro call_RegisterDumpInt	1
%if INT_HOOK
	push	d %1
	call	register_dump_from_int	;safe
	mov	[esp], eax
	pop	eax
%endif
%endmacro

