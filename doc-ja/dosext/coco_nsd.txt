*******************************************************************************
CoCo(Code of Co-native os) / NSD driver解説  for FM-TOWNS
                                                         (C)nabe@abk, 転載自由
*******************************************************************************
[TAB=8] 2016/12/21

###############################################################################
●CoCoの仕組み
###############################################################################

　CoCo は Native(32bit)ドライバ を、後から自由に常駐させたり、解除させたりで
きる仕組みです。TBIOSは、起動時にロードするだけで、それきり解除も何もできま
せんが、CoCoはOS起動後（MS-DOSモード時）に自由に組み換えができます。

-------------------------------------------------------------------------------
○COCO.EXE
-------------------------------------------------------------------------------

　CoCoの本体です。実行することで常駐します。
　BIOS（FM-R系BIOSおよびTOWNS-BIOS）の一部である int 8eh を拡張します。

　CoCo本体はリアルメモリに常駐しますが、組み込んだ NSD ドライバはプロテクト
メモリ（1MBより上位のメモリ）に常駐させます。

* COCO_MEM.EXE / ADDDRV.EXP

　メモリ管理をし、ドライバを追加するための EXE ファイルと EXP ファイルです。
　ADDDRV.EXP にはメモリ管理機構がないらしく、COCO_MEM.EXE を使って呼び出さな
いと多くの場合うまく動作しません。

　COCO_MEM.EXE は、-nocrt オプションなどを指定しても受け付けないようです。

	（例）\hcopy\coco_mem XXXX.nsd

-------------------------------------------------------------------------------
○COCO_END.EXE / DELDRV.EXP
-------------------------------------------------------------------------------

　常駐させたドライバを削除するためのファイルです。
　COCO_END.EXE は内部的に DELDRV.EXP を呼び出しているだけなので、DELDRV.EXP
を直接呼んでも構いません。

　DELDRV.EXP は -banner オプションを付けると詳細を出力します。

	（例）run386 -nocrt deldrv.exp "NSD-ID"

###############################################################################
●COCOのAPI
###############################################################################

　CoCo は FM-R互換BIOS および TOWNS-OS BIOS である、int 8eh を拡張する形で
サービスを提供します。

	mov ax, 0Cxxxh
	int 8eh

-------------------------------------------------------------------------------
○c000h：CoCo確認
-------------------------------------------------------------------------------
	IN	ax = 0c000h

	成功	ah = 0
		bx = 3230h	; Version 
				; if bh>31h success
		;"CoCo Ken"
		cx = 436fh	; 'Co' 
		dx = 436fh	; 'Co'
		si = 204bh	; ' K'
		di = 656eh	; 'en'

	失敗
		ah != 0

※DOS-Extenderの隠しAPIにも、このKenさんのお名前がよくでてきます(^^;;

-------------------------------------------------------------------------------
○c002h：機能不明
-------------------------------------------------------------------------------
	IN	ax = 0c002h
		dx = ? (1)

	成功	ah = 0
	失敗
		ah != 0


-------------------------------------------------------------------------------
○c005h：nsdドライバの常駐数取得
-------------------------------------------------------------------------------
	IN	ax = 0c003h

	成功	ah = 0
		bx = 10h / 情報取得（c103h）で必要なバッファサイズ
		cx = 常駐しているドライバの数
		dx = ? (1)

	失敗
		ah != 0

-------------------------------------------------------------------------------
○c005h：何かのデータを受け取り
-------------------------------------------------------------------------------
	IN	ax    = 0c005h
		ds:di = 受取バッファ(128byte ?)

	成功	ah = 0
		bx = ?
		dx = ?
	失敗
		ah != 0

-------------------------------------------------------------------------------
○c103h：NSDドライバ常駐情報の取得
-------------------------------------------------------------------------------
	IN	ax    = 0c103h
		cx    = ドライバの常駐番号 (0 to n-1)
		ds:di = 16 byte buffer

	成功	ah = 0
                cx = 常駐している数(n)
		bx = cs (LDT)
		dx = ds (LDT)

		ds:di 00-07 byte  CSのセグメントデスクリプタ形式
		ds:di 08-0f byte  DSのセグメントデスクリプタ形式
			※ただし base は物理アドレス、limit は byte 単位

	失敗
		ah != 0

-------------------------------------------------------------------------------
○ce04h：指定のNSDドライバ常駐情報の取得
-------------------------------------------------------------------------------
	IN	ax    = 0ce04h
		ds:dx = "ID文字列"のオフセット

	成功	ah = 0
		cx = NSDのcs
		dx = NSDのds

	失敗
		ah != 0		見つからない


-------------------------------------------------------------------------------
○他（機能不明）
-------------------------------------------------------------------------------
	ax = c005h
	ax = c009h
	ax = c10ch
	ax = c207h


###############################################################################
●NSDファイル形式
###############################################################################

　NSDファイルは、直接実行できないEXPファイルです。
　メモリ（ファイル）先頭におくデータのフォーマットが決まっています。

	dd	0ffffffffh	; +00h
	dw	8000h		; +04h : flags
	dw	0110h		; +06h : strategy entry
	dw	012ah		; +08h : interrupt entry
	db	"FORRBIOS"	; +0ah : ID tag
	db	"DOSNAD02"	; +02h : MAGIC
	dd	0		; +1ah ?
	dd	0		; +1dh ?
	dd	0		; +22h ?
	dd	0		; +26h : DS selector, Write by CoCo

　これは NSDファイル をロードしたときの、メモリ先頭からの状態てす。
（通常のEXPファイルの場合、ヘッダを除く +200h 番地からの状態）

・先頭と「DOSNAD02」については、NSDドライバを示すマーキングだと思われます。
・IDは短い場合は、後ろをスペースで埋めます。
・flagsは何を示しているか分かりません。
・26h番地には、CoCoがメモリ配置時に配置したDSの値を書き込むようです。

-------------------------------------------------------------------------------
○strategy entry
-------------------------------------------------------------------------------

　呼び出し側から far call される、初期設定用のアドレスです。

　管理ファンクションは interrupt で行われるのですが、この際、CPUレジストリで
はなく「共有バッファ」を介してのデータのやり取りをします。この共有アドレスを
NSDドライバに教えるためのファンクションが strategy です。

　ds:ebx にバッファのアドレスを設定して呼び出します。このバッファ領域は
20 byte 程度あれば足りるようですが、実際にどれだけ必要なのかは不明です。

-------------------------------------------------------------------------------
○interrupt entry
-------------------------------------------------------------------------------

　呼び出し側から far call されるアドレスです。管理ファンクションを提供します。

　呼び出し機能コードは、レジスタではなく共有バッファの「+02h」番地に、1 byte
のデータとして書き込みます。

・機能コード一覧
	00h	初期化。おそらくNSDが最初にロードされた時に呼ばれます。
	14h	削除。おそらくNSDが削除される前に呼ばれます。
	c0h	sleep。EXP終了前に、DOS-Extenderによって呼ばれます。
	c1h	wakeup。EXP実行前に、DOS-Extenderによって呼ばれます。

-------------------------------------------------------------------------------
○その他
-------------------------------------------------------------------------------

　sidework機能を提供する場合は、初期化処理時に、TBIOSメモリに直接データ
を書き込んで登録するようです。

　NSDに対して操作をしたい場合は、int 8eh/ax=ce04h などで目的のIDのドラ
イバを確認し、その中の（自分で決めた）特定の番地に操作用エントリー情報
などを書いておきます。


###############################################################################
●参考文献
###############################################################################

・フレコレ9収録「ＢＧＭプレーヤ」（野村さん作） / NSDソース付
