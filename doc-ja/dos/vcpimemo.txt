;****************************************************************************
;|	VCPI (Virtiual Control Program Interface) メモ
;					Copyright(C) kattyo@abk (99/12/11)
;****************************************************************************
;[TAB=8]
;
;・本来は私(nabe)が利用メモを加筆する予定でしたが、
;　当分はこのままにしておきます。
;
;
;****************************************************************************
;★VCPI について
;****************************************************************************

　すべてのファンクションは EMS と同じ "int 67h" を用いて発行されます。AH レ
ジスタに "DEh" を指定することで VCPI function を呼び出すことが出来ます。機
能番号は AL レジスタに設定します。
　なお、VCPI SERVER は EMS 4.0 の機能を提供することが約束されています。

　config.sys 内で指定された、VCPI機能を提供するメモリドライバ (HIMEM.SYS / 
EMM386.EXE) は、'device=' としてのロード時に CPU をプロテクトモードにスイッ
チします。
　メモリドライバの一部をプロテクトメモリに常駐した後、CPU を V86 モードに切
り替えてから制御権を DOS に返します。

　つまり、DOS はメモリドライバを読み込んだ時点で リアルモードからV86モードで
の実行に切り替わる仕組みになっています。
　V86モードでは一部の特権命令が使用できませんが、メモリドライバが内部エミュ
レーションを行うことで、通常の DOS 環境と変わらぬ状態を提供しています。


;****************************************************************************
;★VCPI ファンクション一覧
;****************************************************************************
初期化	00h	V86	VCPI がインストールされているかチェック
	01h	V86	プロテクトモードインターフェイスの取得
	02h	V86	最大物理メモリのアドレスの取得
メモリ	03h	V86,PRO	空きページ数の取得
管理	04h	V86,PRO	メモリを1ページ割り当て
	05h	V86,PRO	メモリを1ページ解放
	06h	V86	最初の1MBにある4Kバイト単位の物理アドレスの取得
REG.	07h	V86	CR0 の読み出し
	08h	V86	デバッグレジスタ DR0〜DR7 の読み出し
	09h	V86	デバッグレジスタ DR0〜DR7 の設定
PIC	0Ah	V86	8259A の割り込みベクタ・マッピングの読み出し
	0Bh	V86	8259A の割り込みベクタ・マッピングの設定
CPU	0Ch	V86	仮想86モードからプロテクトモードへの切り替え
	0Ch	PROTECT	プロテクトモードから仮想86モードへの切り替え


;****************************************************************************
;★VCPI ファンクション
;****************************************************************************
;----------------------------------------------------------------------------
;●インストールチェック / AL=00h
;----------------------------------------------------------------------------

	in	AX = DE00h

	out	成功	AH = 0
			BH = 1 (VCPI メジャー Version)
			BL = 0 (VCPI マイナー Version)

		失敗	AH = non 0

;----------------------------------------------------------------------------
;●プロテクトモードインターフェイスの取得 / AL=01h
;----------------------------------------------------------------------------

	引数
	AX	DE01h
	ES:DI	クライアントの 0〜3FFFFFH までのリニア・アドレスに対応する
		ページ・テーブル用のエントリアドレス
	DS:SI	クライアントの GDT の任意の空きディスクリプタのアドレス。
		ただし、空きはディスクリプタ３つ分の連続したエリアが必要。
	
	戻り値
	AH	0
		成功
		DI	クライアントの 0〜3FFFFFH までのリニア・アドレスに
			対応するページ・テーブル内の最初に初期化されていない
			ページ・テーブル・エントリのオフセット
		EBX	プロテクトモード用のサーバのサービス・エントリの
			オフセット
	AH	0以外
		失敗
	
	説明
	　クライアント側のルーチンをプロテクトモードで実行するときに使用する
	ページテーブルの初期値とサーバのための３つのディスクリプタの値を
	取得します。
	　ここで得られたページテーブルを元に、クライアント側で必要とする
	ページディレクトリとページテーブルを作成します。また、クライアント側
	で使用する GDT に、このファンクションで得られたサーバが使用する３つ
	のディスクリプタを設定する必要があります。
	　これは、クライアント側のプロテクトモードのルーチンを実行する前の
	処理で、このファンクションを使用します。
	　ページテーブルのエリアは 1 つで 4KB を使用します。また、プロテクト
	モード時に使用するページテーブルは、その先頭アドレスが 4KB を区切り
	とする、物理アドレスである必要があります。
	　クライアント側で使用可能なページテーブルのエントリは、リターン値の
	DI が示すエントリから後ろ（高位アドレスの方向）のエリアとなります。
	つまり、VCPI が初期化したページテーブルの内のエントリはクライアント側
	で変更することは出来ません。
	　プロテクトモード用のサーバのサービスエントリのアドレスのセレクタは、
	引数で指定した DS:SI が示すディスクリプタとなります。
	


	★設定されるのは「ページディレクトリ」でなく「ページテーブル」である
	　よってページディレクトリはユーザが設定しなければならない。


	参照
	図１

※手元環境で、このファンクションで初期化されるページテーブルは 10afffh まで。

;----------------------------------------------------------------------------
;●最大物理メモリのアドレスの取得 / AL=02h
;----------------------------------------------------------------------------

	引数
	AX	DE02h
	
	戻り値
	AH	0
		成功
		EDX	VCPI が管理しているメモリ・エリアの最大（最上位）
			ページの物理アドレス
	AH	0以外
		失敗
	
	説明
	EMM386 は、実装されている最大物理メモリのアドレスをクライアントに返却
	しますが、それ以外の EMM は、EMM が管理している最大物理メモリの
	アドレスをクライアントに返します。
	従って、このファンクションが返す値で実装されているプロテクトメモリの
	サイズを推測するようなプログラムを組むべきではありません。



+----------------------------------------------------------------------------+
|	図１								     |
					
	VCPI が設定する値
	↑	|			|
	高	|	メモリ		|← リターン時の DI
	ア	+-----------------------+
	ド	|			|
	レ	|			|
	ス	|プロテクトモード時に	|
		|使用するリニア・	|
		|アドレス 0 からの	|
		|ページ・テーブル	|
		|			|
		|			|
		|			|← 引数の ES:DI 
		+-----------------------+ (リニア・アドレス 0 からの
		|			|  ページ・テーブル)
		|			|


	相対アドレス
	    ↓	+-----------------------+
		|VCPIサーバのデータセグ |	VCPI サーバがプロテクトモード時
	   +10h	|メント・ディスクリプタ	|	に呼び出されるエントリアドレス
		+-----------------------+		↓
		|VCPIサーバのデータセグ |
	   +08h	|メント・ディスクリプタ	|        |ﾘﾀｰﾝ時の EBX の値|
		+-----------------------+  +-----+-----------------+
     引数	|VCPIサーバのコードセグ |→|ｾﾚｸﾀ |32bit オフセット |
     DS:SI→00h	|メント・ディスクリプタ	|  |     |        アドレス |
		+-----------------------+  +-----+-----------------+
								    
|									     |
+----------------------------------------------------------------------------+

;----------------------------------------------------------------------------
;●空きページ数の取得 / AL=03h
;----------------------------------------------------------------------------

	引数
	AX	DE03h
	
	戻り値
	AH	0
		成功
		EDX	空きページ数
	AH	0以外
		失敗

;----------------------------------------------------------------------------
;●メモリを1ページ割り当て / AL=04h
;----------------------------------------------------------------------------

	引数
	AX	DE04h
	
	戻り値
	AH	0
		成功
		EDX	1ページ(4KB)のエリアの物理アドレス (下位12 bitは0)
	AH	0以外
		失敗

;----------------------------------------------------------------------------
;●メモリを1ページ解放 / AL=05H
;----------------------------------------------------------------------------

	引数
	AX	DE05h
	EDX	解放する 1 ページ(4KB)のエリアの物理アドレス (下位12 bitは0)
	
	戻り値
	AH	0
		成功
	AH	0以外
		失敗

;----------------------------------------------------------------------------
;●最初の1MBにあるページ単位の物理アドレスの取得 / AL=06H
;----------------------------------------------------------------------------

	引数
	AX	DE06h
	CX	ページ(4KB)単位のページ番号 (リニアアドレスを右に12bit
		シフトした値)
	
	戻り値
	AH	0
		成功
		EDX	指定ページの物理アドレス (下位12 bitは0)
	AH	0以外
		引数のページ番号が無効
	
	説明
	　最初の1MB、つまりリニアアドレスにして 0〜FF000H の範囲のエリアを
	4KB 単位 (ページテーブルの１エントリに相当する) に区切り、この単位
	で物理アドレスを求めます。
	　簡単に言うと、VCPI が管理しているページ・テーブルのエントリの
	ページフレームアドレスのフィールドを読む操作を、このファンクションは
	行っています。
	　このファンクションは、主として EMS ファンクションで割り当てられた
	メモリ (EMS の論理ページ) の物理アドレスを、クライアントのページ
	テーブルにセットする場合に使用します。
	　実際のプログラムでは、EMS ファンクションで割り当てられたメモリ (EMS
	の論理ページ) の物理アドレスを、EMS のページフレームにマッピングし、
	この EMS のページフレームのセグメントを引数として VCPI のファンク
	ション 06h を呼び出すことで、現在のページフレームにマッピングされて
	いる EMS の論理ページの物理アドレスがわかります。
	　そして、これで得た物理アドレスをページテーブルのエントリとして格納
	することで、EMS の論理ページの内容を、クライアント (プロテクトモード
	のルーチン) の任意のリニアアドレスに配置することが出来ます。
	　ただし、この操作で注意する点は、EMS の 1 ページは 16KB なのですが、
	VCPI の 1 ページは VCPI の 4 ページとなるので、EMS の 1 ページを
	そっくりページ・テーブルのエントリに格納する場合、ページフレームを 
	4KB 単位に分け、4KB 単位にアドレスを変えながら、4 回このファンク
	ション 06h を実行する必要があります。
	　例えば、EMS のページフレームがリニアアドレスにして C0000h から 16KB
	の範囲だった場合、C0000h, C1000h, C2000h, C3000h の４つのリニア
	アドレスについてファンクション 06h を実行する必要があります。


;----------------------------------------------------------------------------
;●CR0 の読み出し / AL=07H
;----------------------------------------------------------------------------

	引数
	AX	DE07h
	
	戻り値
	AH	0
	EBX	CR0 の値

;----------------------------------------------------------------------------
;●デバッグレジスタ DR0〜DR7 の読み出し / AL=08H
;----------------------------------------------------------------------------

	引数
	AX	DE08h
	ES:DI	DR0〜DR7 の値を格納するための DWORD 型の配列
	
	戻り値
	AH	0
	
	説明
	DR4, DR5 は使用されない。

;----------------------------------------------------------------------------
;●デバッグレジスタ DR0〜DR7 の設定 / AL=09H
;----------------------------------------------------------------------------

	引数
	AX	DE09h
	ES:DI	DR0〜DR7 に書き込むための値を格納している DWORD 型の配列
	
	戻り値
	AH	0
	
	説明
	DR4, DR5 は使用されない。


;----------------------------------------------------------------------------
;●8259A の割り込みベクタ・マッピングの読み出し / AL=0AH
;----------------------------------------------------------------------------

	引数
	AX	DE0Ah
	
	戻り値
	AH	0
	BX	IR0 の割り込みベクタ (マスタ側の 8259A)
	CX	IR8 の割り込みベクタ (スレーブ側の 8259A)

;----------------------------------------------------------------------------
;●8259A の割り込みベクタ・マッピングの設定 / AL=0BH
;----------------------------------------------------------------------------

	引数
	AX	DE0Bh
	BX	IR0 の新割り込みベクタ (マスタ側の 8259A)
	CX	IR8 の新割り込みベクタ (スレーブ側の 8259A)
	
	戻り値
	AH	0


;----------------------------------------------------------------------------
;●V86モードからプロテクトモードへの切り替え (V86 mode) / AL=0CH
;----------------------------------------------------------------------------

	引数
	AX	DE0Ch
	ESI	図２のデータ構造を示している「リニアアドレス」 
		ESI は FFFDEh 以下のアドレスであること。
	
	説明
	　リターンしない。CPU のモードがプロテクトモードに切り替わり、図２の
	データ構造の CS:EIP で示したルーチンにジャンプする。
	　割り込み禁止状態にしておく必要があります。
	　このファンクションにより、プロテクト・モード側のルーチンが起動され
	た時、割り込みは禁止され、レジスタ EAX, ESI, DS, ES, FS, GS の値は
	不定となっています。
	
	参考
		図２


	★GDTR / IDTR の部分には、
	　実際にロードするデータが置いてあるアドレスを記述する。
	　esi を構造体先頭リニアアドレスとすると以下の通りである。

		mov	eax,[esi]
		mov	cr3,eax		;CR3 / Page Directory
		mov	ebx,[esi+4]	;GDT
		lgdt	[ebx]		;+00h(w) limit +02h(d) base offset
		mov	edx,[esi+8]	;LDT
		lidt	[edx]		;+00h(w) limit +02h(d) base offset
		mov	ax,[esi+0ah]	;
		lldt	ax		;selector
		mov	bx,[esi+0ch]	;
		ltr	ax		;TSS selector
		mov	eip,[esi+10h]	;EIP
		mov	cs ,[esi+14h]	;CS

	※VCPI でプロテクトモードに切替え時、EFLAGS の初期値は 003082h (IPOL=3)。
	　また、ds,es,fs,gs,ss の値が不定値(V86時のもの)で、
	　そのままの値では push/pop するだけで一般保護エラーになるので注意する。


;----------------------------------------------------------------------------
;●プロテクトモードからV86モードへの切り替え (Protected Mode) / AL=0CH
;----------------------------------------------------------------------------

	引数
	AX	DE0Ch
	DS	ベースアドレスが 0 で、リミットがファンクション 01h で初期化
		されたページテーブルに対応するメモリ空間の最大リニアアドレス
		となっているデータセグメントディスクリプタを示すセレクタ。
	SS:ESP	図３のデータ構造となるようにスタックに値を設定しておく。
		（注！：先頭1MB以内の領域を示している必要がある）

	説明
	　リターンしない。
	　仮想 86 モードに戻り、CS, EIP, SS, ESP, DS, ES, FS, GS には、
	ファンクションを呼び出す前にスタックに設定した値が格納される。
	　割り込み禁止状態にしておく必要があります。
	　引数で指定する DS のディスクリプタのリミットは、ファンクション 01h
	で初期化されたページテーブルに対応するメモリ空間以上のメモリ空間を
	示している分には特に問題は起こらないようです。
	　このファンクションで仮想 86 モード側のルーチンにもどって来たとき、
	割り込みは禁止され、レジスタ GDTR, IDTR, LDTR, TR にはサーバの値が
	設定されています。
	
	参考
		図３

※SS:ESP は、"リニアアドレスが最初の1MB以内のメモリ" にある必要がある。
　そうでないとハングアップする。これは載ってない資料もある。


+----------------------------------------------------------------------------+
|	図２	V86 → プロテクトモード移行時				     |
									
  相対アドレス
  ↓→	0		15		31		47
	+---------------+---------------+---------------+
  +10H	|CS:EIP						|
	+---------------+---------------+---------------+
  +0EH	|TR		|
	+---------------+
  +0CH	|LDTR		|
	+---------------+---------------+
  +08	|IDTR				|
	+---------------+---------------+
  +04	|GDTR				|
	+---------------+---------------+
  +00	|CR3				|
  ↑	+---------------+---------------+
  ｜
  ESI (リニア・アドレス) はここ
									
|									     |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|	図３	プロテクトモード移行時 → V86 移行時			     |
									
	相対アドレス
	  ↓	31		15		0
		+---------------+---------------+
	  +20h	|	-	|	GS	|
		+---------------+---------------+
	  +1Ch	|	-	|	FS	|
		+---------------+---------------+
	  +18h	|	-	|	DS	|
		+---------------+---------------+
	  +14h	|	-	|	ES	|
		+---------------+---------------+
	  +10h	|	-	|	SS	|
		+---------------+---------------+
	  +0Ch	|	       ESP		|
		+---------------+---------------+
	  +08	|	   予約  (EFLAGS)	|
		+---------------+---------------+
	  +04	|	-	|	CS	|
		+---------------+---------------+
 SS:ESP→ +00	|	       EIP		|
		+---------------+---------------+
									


;****************************************************************************
;★使用メモ (by nabe@abk.nu)
;****************************************************************************

・物理メモリの取得 Function

　割り込みを禁止にしておく必要がある。
　正確に書くと、割り込みにより VCPI funtcion に再入してしまうと
　ハングアップする。

・V86時は ESP の上位16bit は無視
